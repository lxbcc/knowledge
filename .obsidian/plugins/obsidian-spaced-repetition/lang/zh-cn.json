{
    "manifest": {
        "translationVersion": 1731256588437,
        "pluginVersion": "1.12.9"
    },
    "description": {
        "original": "Fight the forgetting curve by reviewing flashcards & entire notes.",
        "translation": "Fight the forgetting curve by reviewing flashcards & entire notes."
    },
    "dict": {
        "Notice() {\n    var _a2;\n    const schedule = this._currentCard.scheduleInfo;\n    const currentEaseStr = t(\"CURRENT_EASE_HELP_TEXT\")": "Notice() {\n    var _a2;\n    const schedule = this._currentCard.scheduleInfo;\n    const currentEaseStr = t(\"CURRENT_EASE_HELP_TEXT\")",
        "Notice(currentEaseStr + \"\\n\" + currentIntervalStr + \"\\n\" + generatedFromStr)": "Notice(currentEaseStr + \"\\n\" + currentIntervalStr + \"\\n\" + generatedFromStr)",
        "Notice();\n    })": "Notice();\n    })",
        "Notice(t(\"MIN_ONE_DAY\")": "Notice(t(\"MIN_ONE_DAY\")",
        "Notice(t(\"VALID_NUMBER_WARNING\")": "Notice(t(\"VALID_NUMBER_WARNING\")",
        "Notice(t(\"BASE_EASE_MIN_WARNING\")": "Notice(t(\"BASE_EASE_MIN_WARNING\")",
        "Notice(t(\"EASY_BONUS_MIN_WARNING\")": "Notice(t(\"EASY_BONUS_MIN_WARNING\")",
        "Notice(t(\"MAX_INTERVAL_MIN_WARNING\")": "Notice(t(\"MAX_INTERVAL_MIN_WARNING\")",
        "Notice(t(\"ALL_CAUGHT_UP\")": "Notice(t(\"ALL_CAUGHT_UP\")",
        "Notice(t(\"NO_DECK_EXISTS\", { deckName: deckKey })": "Notice(t(\"NO_DECK_EXISTS\", { deckName: deckKey })",
        "Notice(t(\"NOTE_IN_IGNORED_FOLDER\")": "Notice(t(\"NOTE_IN_IGNORED_FOLDER\")",
        "Notice(t(\"PLEASE_TAG_NOTE\")": "Notice(t(\"PLEASE_TAG_NOTE\")",
        "Notice(t(\"RESPONSE_RECEIVED\")": "Notice(t(\"RESPONSE_RECEIVED\")",
        " log(event)": " log(event)",
        ".log(\", '        event.location.start.line + \":\" + event.location.start.column + \"-\"', '          + event.location.end.line + \":\" + event.location.end.column + \" \"', '          + pad(event.type, 10)": ".log(\", '        event.location.start.line + \":\" + event.location.start.column + \"-\"', '          + event.location.end.line + \":\" + event.location.end.column + \" \"', '          + pad(event.type, 10)",
        ".log(noteLinkStat.totalLinkCount + 0.5)": ".log(noteLinkStat.totalLinkCount + 0.5)",
        ".log(64)": ".log(64)",
        ".log(scheduledCount + 0.5)": ".log(scheduledCount + 0.5)",
        ".log(str += this.toString(indent)": ".log(str += this.toString(indent)",
        ".log(\n      \"The parsers grammar is provided below. You can test it with https://peggyjs.org/online.html.\"\n    )": ".log(\n      \"The parsers grammar is provided below. You can test it with https://peggyjs.org/online.html.\"\n    )",
        ".log({\n      info: \"Copy the grammar by right-clicking on the property grammar and copying it as a string. Then, paste it in https://peggyjs.org/online.html.\",\n      grammar\n    })": ".log({\n      info: \"Copy the grammar by right-clicking on the property grammar and copying it as a string. Then, paste it in https://peggyjs.org/online.html.\",\n      grammar\n    })",
        ".log(\"New parser generated in \" + (t1 - t0)": ".log(\"New parser generated in \" + (t1 - t0)",
        ".log(\"Parser already exists. No need to generate a new parser.\")": ".log(\"Parser already exists. No need to generate a new parser.\")",
        ".log(\"Text to parse:\\n<<<\" + text + \">>>\")": ".log(\"Text to parse:\\n<<<\" + text + \">>>\")",
        ".log(\"Parsed cards:\\n\", cards)": ".log(\"Parsed cards:\\n\", cards)",
        ".log(reason)": ".log(reason)",
        ".log(this.options.myAdapterOption)": ".log(this.options.myAdapterOption)",
        ".log(`SR: ${t(\"DECKS\")": ".log(`SR: ${t(\"DECKS\")",
        ".log(\n        \"SR: \" + t(\"SYNC_TIME_TAKEN\", {\n          t: Date.now()": ".log(\n        \"SR: \" + t(\"SYNC_TIME_TAKEN\", {\n          t: Date.now()",
        ".error('Unknown module \"'.concat(t3.library, '\"')": ".error('Unknown module \"'.concat(t3.library, '\"')",
        " error(message, location)": " error(message, location)",
        ".error('Module \"'.concat(s.binding, '\" is already imported')": ".error('Module \"'.concat(s.binding, '\" is already imported')",
        ".error('Label \"'.concat(e2.label, '\" is already defined')": ".error('Label \"'.concat(e2.label, '\" is already defined')",
        ".error('Rule \"'.concat(e2.name, '\" is already defined')": ".error('Rule \"'.concat(e2.name, '\" is already defined')",
        ".error(\"Possible infinite loop when parsing (left recursion: \" + n.join(\" -> \")": ".error(\"Possible infinite loop when parsing (left recursion: \" + n.join(\" -> \")",
        ".error(\"Possible infinite loop when parsing (repetition used with an expression that may not consume any input)": ".error(\"Possible infinite loop when parsing (repetition used with an expression that may not consume any input)",
        ".error(\"Possible infinite loop when parsing (unbounded range repetition used with an expression that may not consume any input)": ".error(\"Possible infinite loop when parsing (unbounded range repetition used with an expression that may not consume any input)",
        ".error('Rule \"'.concat(t3.name, '\" is not defined')": ".error('Rule \"'.concat(t3.name, '\" is not defined')",
        ".error('\"@\" cannot be used with an action block', e2.labelLocation, [{ message: \"Action block location\", location: t3.codeLocation }])": ".error('\"@\" cannot be used with an action block', e2.labelLocation, [{ message: \"Action block location\", location: t3.codeLocation }])",
        ".error(`SRS error: Locale ${import_obsidian.moment.locale()": ".error(`SRS error: Locale ${import_obsidian.moment.locale()",
        ".error(...args)": ".error(...args)",
        ".error(\n        `updateQuestionText: Text not found: ${originalText.substring(\n          0,\n          100\n        )": ".error(\n        `updateQuestionText: Text not found: ${originalText.substring(\n          0,\n          100\n        )",
        ".error(\"Unexpected error:\", error)": ".error(\"Unexpected error:\", error)",
        ".error(`Invalid scale configuration for scale: ${id}`)": ".error(`Invalid scale configuration for scale: ${id}`)",
        ".error(\"Failed to create chart: can't acquire context from the given item\")": ".error(\"Failed to create chart: can't acquire context from the given item\")",
        "name: \"Anno Domini\"": "name: \"Anno Domini\"",
        "name: \"Before Christ\"": "name: \"Before Christ\"",
        "text: \"\",\n      padding: {\n        top: 4,\n        bottom: 4\n      }\n    },\n    ticks: {\n      minRotation: 0,\n      maxRotation: 50,\n      mirror: false,\n      textStrokeWidth: 0,\n      textStrokeColor: \"": "text: \"\",\n      padding: {\n        top: 4,\n        bottom: 4\n      }\n    },\n    ticks: {\n      minRotation: 0,\n      maxRotation: 50,\n      mirror: false,\n      textStrokeWidth: 0,\n      textStrokeColor: \"",
        "text: \"\"\n    }\n  },\n  descriptors: {\n    _scriptable: (name) => !name.startsWith(\"": "text: \"\"\n    }\n  },\n  descriptors: {\n    _scriptable: (name) => !name.startsWith(\"",
        "text: \"\",\n    weight: 2e3\n  },\n  defaultRoutes: {\n    color: \"": "text: \"\",\n    weight: 2e3\n  },\n  defaultRoutes: {\n    color: \"",
        "text: \"\",\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: \"": "text: \"\",\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: \"",
        "text: `${t(\"SETTINGS_HEADER\")}`": "text: `${t(\"SETTINGS_HEADER\")}`",
        "text: `${t(\"HELP\")}`": "text: `${t(\"HELP\")}`",
        "text: `${t(\"LOGGING\")}`": "text: `${t(\"LOGGING\")}`",
        ".setText(`${this.settings.flashcardHardText}`)": ".setText(`${this.settings.flashcardHardText}`)",
        ".setText(`${this.settings.flashcardEasyText}`)": ".setText(`${this.settings.flashcardEasyText}`)",
        ".setText(`${buttonName} - ${textInterval(interval, false)}`)": ".setText(`${buttonName} - ${textInterval(interval, false)}`)",
        ".innerText = \"\"": ".innerText = \"\""
    }
}
